on: [push]
name: build

jobs:
  unittest:
    runs-on: windows-latest
    name: Build and run unittests
    strategy:
      matrix:
        config: [Debug, Release]
        toolset: [ClangCl, v141, v142]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Boost
      uses: MarkusJx/install-boost@v1.0.1
      id: install-boost
      with:
        boost_version: 1.72.0
    - name: Install packages
      run: cinst openssl
    - name: Configure
      env:
        TOOLSET: ${{ matrix.toolset }}
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      shell: bash
      run: cmake -B build -T $TOOLSET -DENABLE_DOCUMENTATION=OFF
    - name: Build
      env:
        CONFIG: ${{ matrix.config }}
      shell: bash
      run: cmake --build build/ --config $CONFIG
    - name: Run tests
      env:
        CONFIG: ${{ matrix.config }}
      shell: bash
      run: ctest -C $CONFIG --output-on-failure
      working-directory: build/

  codecoverage:
    runs-on: windows-latest
    name: Generate and upload code coverage
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Boost
      uses: MarkusJx/install-boost@v1.0.1
      id: install-boost
      with:
        boost_version: 1.72.0
    - name: Install packages
      run: cinst openssl opencppcoverage
    - name: Configure
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      shell: bash
      run: cmake -B build -DENABLE_DOCUMENTATION=OFF
    - name: Build
      run: cmake --build build/ --target unittest
    - name: Generate code coverage
      shell: bash
      run: exec "${PROGRAMFILES}"/opencppcoverage/opencppcoverage --cover_children --sources="${GITHUB_WORKSPACE}"\\include --modules=unittest.exe --export_type=cobertura:cobertura.xml -- ctest
      working-directory: build/
    - name: Upload code coverage
      uses: codecov/codecov-action@v1
      with:
        files: build/cobertura.xml
        fail_ci_if_error: true

  generate_documentation:
    runs-on: ubuntu-latest
    name: Generate and publish HTML documentation to Github Pages
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install APT packages
      env:
        DEBIAN_FRONTEND: noninteractive
      run: sudo apt-get -yq install doxygen libboost-dev libssl-dev python3-pip
    - name: Install PIP packages
      # TODO: Consider using requirements.txt to ensure specific versions are used
      run: sudo pip3 install sphinx breathe sphinxcontrib-fulltoc
    - name: Configure build system
      run: mkdir build && cmake -Bbuild -H.
    - name: Build documentation
      run: cmake --build build/ --target sphinx
    - name: Disable Jekyll templating
      run: touch build/doc/sphinx/.nojekyll
    - name: Deploy
      if: github.ref == 'refs/heads/master'
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BRANCH: gh-pages
        FOLDER: build/doc/sphinx
        CLEAN: true
